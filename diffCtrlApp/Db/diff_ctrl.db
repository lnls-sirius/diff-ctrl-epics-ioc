######################################################################
#
#            Position Difference Control App Database
#
# Desc: These records provide an abstraction layer for two
# motor applications that control the difference between
# the position of two edges, such as scrapers and slits.
#
#####################################################################

#####################################################################
# LOW LEVEL IOCs INFO
#
# Desc: Records providing information regarding the motion
# controllers IOCs.

record(stringout, "$(P)$(R)NegativeMotionCtrl-Cte"){
  field(DESC, "Motion controller for neg side name")
  field(VAL, "$(CTRL_NEG)")
}

record(stringout, "$(P)$(R)PositiveMotionCtrl-Cte"){
  field(DESC, "Motion controller for pos side name")
  field(VAL, "$(CTRL_POS)")
}

# Done moving

record(bi, "$(P)$(R)NegativeDoneMov-Mon"){
  field(DESC, "Negative edge is done moving")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL, "1")
  field(INP, "$(CTRL_NEG)DoneMov-Mon CPP")
}

record(bi, "$(P)$(R)PositiveDoneMov-Mon"){
  field(DESC, "Positive edge is done moving")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL, "1")
  field(INP, "$(CTRL_POS)DoneMov-Mon CPP")
}

#####################################################################
# CALIBRATION
#
# Desc: Records for slit/scraper position calibration.

# Device center position in positive and negative
# edges reference frames
record(ao, "$(P)$(R)PositiveEdgeCenter-SP"){
  field(DESC, "Device center in pos edge ref frame")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(FLNK, "$(P)$(R)PositiveEdgeCenter-RB")
}

record(ai, "$(P)$(R)PositiveEdgeCenter-RB"){
  field(DESC, "Device center in pos edge ref frame")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INP, "$(P)$(R)PositiveEdgeCenter-SP")
  field(FLNK, "$(P)$(R)NotInFirstPass")
}

record(ao, "$(P)$(R)NegativeEdgeCenter-SP"){
  field(DESC, "Device center in neg edge ref frame")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(FLNK, "$(P)$(R)NegativeEdgeCenter-RB")
}

record(ai, "$(P)$(R)NegativeEdgeCenter-RB"){
  field(DESC, "Device center in neg edge ref frame")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INP, "$(P)$(R)NegativeEdgeCenter-SP")
  field(FLNK, "$(P)$(R)NotInFirstPass")
}

# Positive/Negative Edge Center Reference
# cannot be updated while motor is moving
record(calcout, "$(P)$(R)ProtectEdgeCenterConfig1"){
  field(DESC, "Protect edge center ref configuration")
  field(INPA, "$(CTRL_NEG)Mtr.DMOV CPP")
  field(INPB, "$(CTRL_POS)Mtr.DMOV CPP")
  field(INPC, "$(P)$(R)KeepEdgeCenterLocked CPP")
  field(CALC, "(A=0||B=0||C=1)?1:0")
  field(OOPT, "On Change")
  field(VAL, "10") # init with different value
  field(OUT, "$(P)$(R)ProtectEdgeCenterConfig2.PROC PP")
}

record(seq, "$(P)$(R)ProtectEdgeCenterConfig2"){
  field(DESC, "Protect edge center ref configuration")
  field(SELM, "All")
  field(DOL1, "$(P)$(R)ProtectEdgeCenterConfig1.VAL")
  field(DOL2, "$(P)$(R)ProtectEdgeCenterConfig1.VAL")
  field(LNK1, "$(P)$(R)NegativeEdgeCenter-SP.DISP")
  field(LNK2, "$(P)$(R)PositiveEdgeCenter-SP.DISP")
}

# Transfer Edge Center Reference updated
# to transform record internal vars
record(calcout, "$(P)$(R)NotInFirstPass"){
  field(DESC, "Only proc out link after first pass")
  field(INPA, "0")
  field(CALC, "A;A:=1")
  field(OOPT, "When Non-zero")
#  field(OUT, "$(P)$(R)UpdateEdgeReference.PROC PP")
  field(OUT, "$(P)$(R)KeepEdgeCenterLocked.A PP")
}

# Prevent ProtectEdgeCenterConfig1 from enabling
# caputs to Edge Center ref. The caputs are enabled
# at the end of force operation.
record(calcout, "$(P)$(R)KeepEdgeCenterLocked"){
  field(DESC, "Prevent Edge Center from being changed")
  field(INPA, "0")
  field(CALC, "A")
  field(VAL, "0")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)UpdateEdgeReference.PROC PP")
}

record(sseq, "$(P)$(R)UpdateEdgeReference"){
  field(DESC, "Update conv chain with center values")
  field(SELM, "All")
  # Force only positive edge, since force value chain
  # is going to automatically set negative edge with RB.
  field(DO1, "1")
  field(LNK1, "$(P)$(R)NegativeEdgeCenter-SP.DISP") # disable center ref changes
  field(DO2, "1")
  field(LNK2, "$(P)$(R)NegativeEdgeCenter-SP.DISP") # disable center ref changes
  field(DO3, "1")
  field(LNK3, "$(P)$(R)NegativeEdgePos-SP.DISP")    # disable movement
  field(DO4, "1")
  field(LNK4, "$(P)$(R)PositiveEdgePos-SP.DISP")    # disable movement
  field(DO5, "1")
  field(LNK5, "$(P)$(R)Center-SP.DISP")             # disable movement
  field(DO6, "1")
  field(LNK6, "$(P)$(R)Width-SP.DISP")              # disable movement
  # wait for pos RB update in motion section
  # since center ref changed
  field(DLY7, "1")
  field(DOL7, "$(P)$(R)PositiveEdgePos-RB")
  field(LNK7, "$(P)$(R)ForcePositiveEdgePos-Cmd PP")
}

# FORCE VIRTUAL POSITION TO NEGATIVE EDGE
# (useful when using absolute encoders)

record(ao, "$(P)$(R)ForceNegativeEdgePos-Cmd"){
  field(DESC, "Force a virtual value to neg edge")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(FLNK, "$(P)$(R)ForceNegativePosCheck1")
}

# Check that motor is not moving
record(calcout, "$(P)$(R)ForceNegativePosCheck1"){
  field(DESC, "Set force complete flag equal 0")
  field(INPA, "$(CTRL_NEG)Mtr.DMOV")
  field(INPB, "$(P)$(R)ForceComplete-Mon")
  field(CALC, "!((A#0)&&(B#0))")
  field(OOPT, "When Zero")
  field(OUT, "$(P)$(R)ForceComplete-Mon PP")
  field(FLNK, "$(P)$(R)ForceNegativePosCheck2")
}

record(calcout, "$(P)$(R)ForceNegativePosCheck2"){
  field(DESC, "Check dmov is different than zero")
  field(INPA, "$(P)$(R)ForceNegativePosCheck1")
  field(CALC, "A=0")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)ForceNegativeSetVars.PROC PP")
}

# Set variables before forcing
# negative edge position
record(seq, "$(P)$(R)ForceNegativeSetVars"){
  field(DESC, "Set vars before neg pos forcing")
  field(SELM, "All")
  field(DOL1, "$(P)$(R)ForceNegativeEdgePos-Cmd")
  field(DOL2, "$(P)$(R)PositiveEdgePos-RB")
  field(DO3, "1") # disable
  field(DO4, "1") # disable
  field(DO5, "1") # disable
  field(DO6, "1") # disable
  field(LNK1, "$(P)$(R)UpdateCoordConvVal1 PP")
  field(LNK2, "$(P)$(R)UpdateCoordConvVal2 PP")
  field(LNK3, "$(P)$(R)Center-SP.DISP")
  field(LNK4, "$(P)$(R)Width-SP.DISP")
  field(LNK5, "$(P)$(R)NegativeEdgePos-SP.DISP")
  field(LNK6, "$(P)$(R)PositiveEdgePos-SP.DISP")
  field(DLY6, "0.5")
  field(FLNK, "$(P)$(R)DisableProtect")
}

# FORCE VIRTUAL POSITION TO POSITIVE EDGE
# (useful when using absolute encoders)

record(ao, "$(P)$(R)ForcePositiveEdgePos-Cmd"){
  field(DESC, "Force a virtual value to pos edge")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(FLNK, "$(P)$(R)ForcePositivePosCheck1")
}

# Check that motor is not moving
record(calcout, "$(P)$(R)ForcePositivePosCheck1"){
  field(DESC, "Set force complete flag equal 0")
  field(INPA, "$(CTRL_POS)Mtr.DMOV")
  field(INPB, "$(P)$(R)ForceComplete-Mon")
  field(CALC, "!((A#0)&&(B#0))")
  field(OOPT, "When Zero")
  field(OUT, "$(P)$(R)ForceComplete-Mon PP")
  field(FLNK, "$(P)$(R)ForcePositivePosCheck2")
}

record(calcout, "$(P)$(R)ForcePositivePosCheck2"){
  field(DESC, "Check dmov is different than zero")
  field(INPA, "$(P)$(R)ForcePositivePosCheck1")
  field(CALC, "A=0")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)ForcePositiveSetVars.PROC PP")
}

# Set variables before forcing
# positive edge position
record(seq, "$(P)$(R)ForcePositiveSetVars"){
  field(DESC, "Set vars before positive pos forcing")
  field(SELM, "All")
  field(DOL1, "$(P)$(R)NegativeEdgePos-RB")
  field(DOL2, "$(P)$(R)ForcePositiveEdgePos-Cmd")
  field(DO3, "1") # disable
  field(DO4, "1") # disable
  field(DO5, "1") # disable
  field(DO6, "1") # disable
  field(LNK1, "$(P)$(R)UpdateCoordConvVal1 PP")
  field(LNK2, "$(P)$(R)UpdateCoordConvVal2 PP")
  field(LNK3, "$(P)$(R)Center-SP.DISP")
  field(LNK4, "$(P)$(R)Width-SP.DISP")
  field(LNK5, "$(P)$(R)NegativeEdgePos-SP.DISP")
  field(LNK6, "$(P)$(R)PositiveEdgePos-SP.DISP")
  field(DLY6, "0.5")
  field(FLNK, "$(P)$(R)DisableProtect")
}

# RETRIGGER COORDINATE CONVERSION UPDATE

# Disable limit protection to allow the set points
# and the coordinate conversion record to be
# updated
record(seq, "$(P)$(R)DisableProtect"){
  field(DESC, "Disable limit protection for edges")
  field(SELM, "All")
  field(DO1, "0")
  field(DO2, "0")
  field(DO3, "1000000")
  field(DO4, "-1000000")
  field(DO5, "1000000")
  field(DO6, "-1000000")
  field(LNK1, "$(P)$(R)NegativeEdgeProtect.DISV")         # Disable neg edge limit protection
  field(LNK2, "$(P)$(R)PositiveEdgeProtect.DISV")         # Disable pos edge limit protection
  field(LNK3, "$(P)$(R)NegativeEdgePos-SP.DRVH")          # Set a relaxed high limit for the negative edge
  field(LNK4, "$(P)$(R)NegativeEdgePos-SP.DRVL")          # Set a relaxed low limit for the negative edge
  field(LNK5, "$(P)$(R)PositiveEdgePos-SP.DRVH")          # Set a relaxed high limit for the positive edge
  field(LNK6, "$(P)$(R)PositiveEdgePos-SP.DRVL")          # Set a relaxed low limit for the positive edge
  field(FLNK, "$(P)$(R)DelayAndUpdate")
}

record(calcout, "$(P)$(R)DelayAndUpdate"){
  field(DESC, "Delay until motor settings complete")
  field(CALC, "1")
  field(ODLY, "1")
  field(OUT, "$(P)$(R)UpdateCoordConv.PROC PP")           # Trigger coordinate conversion update
}

record(bo, "$(P)$(R)ForceComplete-Mon"){
  field(DESC, "Complete flag for force operation")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(VAL, "0")
}

# Allow manual adjust of center and width,
# without moving any edges
record(bo, "$(P)$(R)SetMode-Sel"){
  field(DESC, "Set mode for center and width")
  field(ZNAM, "Move")
  field(ONAM, "Calibrate")
  field(FLNK, "$(P)$(R)SetModeSeq")
}

# Sequence of operations to configure mode
record(seq, "$(P)$(R)SetModeSeq"){
  field(DESC, "Setting mode config sequence")
  field(SELM, "All")
  field(DOL1, "$(P)$(R)SetMode-Sel")
  field(DOL2, "$(P)$(R)SetMode-Sel")
  field(LNK1, "$(CTRL_NEG)Mtr.SET PP")               # 0 -> Use, 1 -> Set
  field(LNK2, "$(CTRL_POS)Mtr.SET PP")              # 0 -> Use, 1 -> Set
  field(FLNK, "$(P)$(R)SetMode-Sts")
}

# Set mode status
record(bi, "$(P)$(R)SetMode-Sts"){
  field(DESC, "Set mode for center and width status")
  field(ZNAM, "Move")
  field(ONAM, "Calibrate")
  field(INP, "$(P)$(R)SetMode-Sel")
}

# Start homing of both window sides cmd
record(bo, "$(P)$(R)Home-Cmd"){
  field(DESC, "Home both edges")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)HomeSeq")
}

# Homing sequece
record(seq, "$(P)$(R)HomeSeq"){
  field(DESC, "Homing sequence")
  field(SELM, "All")
  field(DOL1, "$(P)$(R)Home-Cmd")
  field(DOL2, "$(P)$(R)Home-Cmd")
  field(LNK1, "$(CTRL_NEG)HomeToLimSw-Cmd")
  field(LNK2, "$(CTRL_POS)HomeToLimSw-Cmd")
}

#####################################################################
# MOTION CONTROL
#
# Desc: Motion control main parameters.

# Position of slit/scraper negative edge
record(ao, "$(P)$(R)NegativeEdgePos-SP"){
  field(DESC, "Negative edge position")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(DRVH, "1000000")                              # Temporary setting, only for startup
  field(DRVL, "-1000000")                             # Temporary setting, only for startup
  field(OUT, "$(P)$(R)CoordinateConv.A PP")
  field(DISP, "1")                                    # record start DISABLED
}

# Position of slit/scraper pos edge
record(ao, "$(P)$(R)PositiveEdgePos-SP"){
  field(DESC, "Positive edge position")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(DRVH, "1000000")                              # Temporary setting, only for startup
  field(DRVL, "-1000000")                             # Temporary setting, only for startup
  field(OUT, "$(P)$(R)CoordinateConv.B PP")
  field(DISP, "1")                                    # record start DISABLED
}

# Center
record(ao, "$(P)$(R)Center-SP"){
  field(DESC, "Center set point")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(OUT, "$(P)$(R)CoordinateConv.C PP")
  field(DISP, "1")                                    # record start DISABLED
}

# Width
record(ao, "$(P)$(R)Width-SP"){
  field(DESC, "Width set point")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(DRVH, "500")                                  # High limit is set here only to enable low limit
  field(DRVL, "0")                                    # Width cannot be negative
  field(OUT, "$(P)$(R)CoordinateConv.D PP")
  field(DISP, "1")                                    # record start DISABLED
}

# Convert coordinates
record(transform, "$(P)$(R)CoordinateConv"){
  field(DESC, "Coordinate converter")
  field(COPT, "Conditional")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
# ----- Inputs -----
# Do not use input links, so that it
# can operate in Conditional mode
# ----- Create synonyms -----
  field(CMTA, "$neg")
  field(CMTB, "$pos")
  field(CMTC, "$center")
  field(CMTD, "$width")
# ----- Conversion expressions -----
  field(CLCA, "$center-$width/2")                     # Virtual neg edge position
  field(CLCB, "$center+$width/2")                     # Virtual pos edge position
  field(CLCC, "($neg+$pos)/2")                        # Center position
  field(CLCD, "$pos-$neg")                            # Width of slit/scraper window
# ----- Outputs -----
#  field(OUTA, "$(CTRL_NEG)AbsPos-SP")
  field(FLNK, "$(P)$(R)DevPositivePos")               # Proc convertion records
}

# Convert position from centroid reference frame
# to device edge reference frame
record(calcout, "$(P)$(R)DevPositivePos"){
  field(DESC, "Pos edge conv ref centroid to edge")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INPA, "$(P)$(R)CoordinateConv.B")
  field(INPB, "$(P)$(R)PositiveEdgeCenter-RB")
  field(CALC, "B-A")
  field(FLNK, "$(P)$(R)DevNegativePos")
}

record(calcout, "$(P)$(R)DevNegativePos"){
  field(DESC, "Neg edge conv ref centroid to edge")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INPA, "$(P)$(R)CoordinateConv.A")
  field(INPB, "$(P)$(R)NegativeEdgeCenter-RB")
  field(CALC, "A+B")
  field(FLNK, "$(P)$(R)PositiveEdgeMovConv")
}

# Convert position from device edge
# reference frame to stage position

# Positive edge stage
record(aSub, "$(P)$(R)PositiveEdgeMovConv"){
  field(DESC, "Pos edge mov conv edge-to-stage")
  field(SNAM, "$(CONV_FUNC_POS_CMD)")    # movement conversion function
  field(EFLG, "ALWAYS")
  field(BRSV, "MAJOR")
  field(PREC, "15")
  field(INPA, "$(P)$(R)DevPositivePos")  # desired device position (device-to-stage)
  field(INPB, "$(CONV_INPB)")
  field(INPC, "$(CONV_INPC)")
  field(INPD, "$(CONV_INPD)")
  field(INPE, "$(CONV_INPE)")
  field(INPF, "$(CONV_INPF)")
  field(INPG, "$(CONV_INPG)")
  field(INPH, "$(CONV_INPH)")
  field(INPI, "$(CONV_INPI)")
  field(INPJ, "$(CONV_INPJ)")
  field(INPK, "$(CONV_INPK)")
  field(INPL, "$(CONV_INPL)") 
  field(FTA, "DOUBLE")
  field(FTB, "DOUBLE")
  field(FTC, "DOUBLE")
  field(FTD, "DOUBLE")
  field(FTE, "DOUBLE")
  field(FTF, "DOUBLE")
  field(FTG, "DOUBLE")
  field(FTH, "DOUBLE")
  field(FTI, "DOUBLE")
  field(FTJ, "DOUBLE")
  field(FTK, "DOUBLE")
  field(FTL, "DOUBLE")
  field(OUTA, "$(CTRL_POS)AbsPos-SP PP") # Desired output stage position
  field(FLNK, "$(P)$(R)NegativeEdgeMovConv")
}

# Negative edge stage
record(aSub, "$(P)$(R)NegativeEdgeMovConv"){
  field(DESC, "Neg edge mov conv edge-to-stage")
  field(SNAM, "$(CONV_FUNC_NEG_CMD)")    # movement conversion function
  field(EFLG, "ALWAYS")
  field(BRSV, "MAJOR")
  field(PREC, "15")
  field(INPA, "$(P)$(R)DevNegativePos")  # desired device position (device-to-stage)
  field(INPB, "$(CONV_INPB)")
  field(INPC, "$(CONV_INPC)")
  field(INPD, "$(CONV_INPD)")
  field(INPE, "$(CONV_INPE)")
  field(INPF, "$(CONV_INPF)")
  field(INPG, "$(CONV_INPG)")
  field(INPH, "$(CONV_INPH)")
  field(INPI, "$(CONV_INPI)")
  field(INPJ, "$(CONV_INPJ)")
  field(INPK, "$(CONV_INPK)")
  field(INPL, "$(CONV_INPL)")
  field(FTA, "DOUBLE")
  field(FTB, "DOUBLE")
  field(FTC, "DOUBLE")
  field(FTD, "DOUBLE")
  field(FTE, "DOUBLE")
  field(FTF, "DOUBLE")
  field(FTG, "DOUBLE")
  field(FTH, "DOUBLE")
  field(FTI, "DOUBLE")
  field(FTJ, "DOUBLE")
  field(FTK, "DOUBLE")
  field(FTL, "DOUBLE")
  field(OUTA, "$(CTRL_NEG)AbsPos-SP PP") # Desired output stage position
}

# Negative edge position readback
record(aSub, "$(P)$(R)NegativeEdgeMovConvRB"){
  field(DESC, "Neg edge mov conv edge-to-stage")
  field(SNAM, "$(CONV_FUNC_NEG_RB)")       # movement conversion function
  field(EFLG, "ALWAYS")
  field(BRSV, "MAJOR")
  field(PREC, "15")
  field(INPA, "$(CTRL_NEG)EncPos-Mon CPP") # stage position (stage-to-device conv)
  field(INPB, "$(CONV_INPB)")
  field(INPC, "$(CONV_INPC)")
  field(INPD, "$(CONV_INPD)")
  field(INPE, "$(CONV_INPE)")
  field(INPF, "$(CONV_INPF)")
  field(INPG, "$(CONV_INPG)")
  field(INPH, "$(CONV_INPH)")
  field(INPI, "$(CONV_INPI)")
  field(INPJ, "$(CONV_INPJ)")
  field(INPK, "$(CONV_INPK)")
  field(INPL, "$(CONV_INPL)")
  field(FTA, "DOUBLE")
  field(FTB, "DOUBLE")
  field(FTC, "DOUBLE")
  field(FTD, "DOUBLE")
  field(FTE, "DOUBLE")
  field(FTF, "DOUBLE")
  field(FTG, "DOUBLE")
  field(FTH, "DOUBLE")
  field(FTI, "DOUBLE")
  field(FTJ, "DOUBLE")
  field(FTK, "DOUBLE")
  field(FTL, "DOUBLE")
  field(OUTA, "$(P)$(R)NegativeEdgePosRBAux PP")
}

record(ai, "$(P)$(R)NegativeEdgePosRBAux"){
  field(DESC, "Auxiliar var for NegativeEdgePos RB")
  field(PREC, "$(PREC)")
  field(FLNK, "$(P)$(R)NegativeEdgePos-RB")
}

record(calc, "$(P)$(R)NegativeEdgePos-RB"){
  field(DESC, "Negative edge position RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INPA, "$(P)$(R)NegativeEdgePosRBAux")      # Device tip position
  field(INPB, "$(P)$(R)NegativeEdgeCenter-RB CPP") # Negative edge center position !!
  field(CALC, "A-B")
  field(FLNK, "$(P)$(R)Center-RB")
}

# Positive edge position readback
record(aSub, "$(P)$(R)PositiveEdgeMovConvRB"){
  field(DESC, "Pos edge mov conv edge-to-stage")
  field(SNAM, "$(CONV_FUNC_POS_RB)")       # movement conversion function
  field(EFLG, "ALWAYS")
  field(BRSV, "MAJOR")
  field(PREC, "15")
  field(INPA, "$(CTRL_POS)EncPos-Mon CPP") # stage position (stage-to-device conv)
  field(INPB, "$(CONV_INPB)")
  field(INPC, "$(CONV_INPC)")
  field(INPD, "$(CONV_INPD)")
  field(INPE, "$(CONV_INPE)")
  field(INPF, "$(CONV_INPF)")
  field(INPG, "$(CONV_INPG)")
  field(INPH, "$(CONV_INPH)")
  field(INPI, "$(CONV_INPI)")
  field(INPJ, "$(CONV_INPJ)")
  field(INPK, "$(CONV_INPK)")
  field(INPL, "$(CONV_INPL)")
  field(FTA, "DOUBLE")
  field(FTB, "DOUBLE")
  field(FTC, "DOUBLE")
  field(FTD, "DOUBLE")
  field(FTE, "DOUBLE")
  field(FTF, "DOUBLE")
  field(FTG, "DOUBLE")
  field(FTH, "DOUBLE")
  field(FTI, "DOUBLE")
  field(FTJ, "DOUBLE")
  field(FTK, "DOUBLE")
  field(FTL, "DOUBLE")
  field(OUTA, "$(P)$(R)PositiveEdgePosRBAux PP")
}

record(ai, "$(P)$(R)PositiveEdgePosRBAux"){
  field(DESC, "Auxiliar var for PositiveEdgePos RB")
  field(PREC, "$(PREC)")
  field(FLNK, "$(P)$(R)PositiveEdgePos-RB")
}

record(calc, "$(P)$(R)PositiveEdgePos-RB"){
  field(DESC, "Positive edge position RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INPA, "$(P)$(R)PositiveEdgePosRBAux")      # Device tip position
  field(INPB, "$(P)$(R)PositiveEdgeCenter-RB CPP") # Positive edge center position
  field(CALC, "B-A")
  field(FLNK, "$(P)$(R)Center-RB")
}

# Center readback
record(calc, "$(P)$(R)Center-RB"){
  field(DESC, "Center RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INPA, "$(P)$(R)NegativeEdgePos-RB")
  field(INPB, "$(P)$(R)PositiveEdgePos-RB")
  field(CALC, "(A+B)/2")
  field(FLNK, "$(P)$(R)Width-RB")
}

# Width readback
record(calc, "$(P)$(R)Width-RB"){
  field(DESC, "Width RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")  
  field(INPA, "$(P)$(R)NegativeEdgePos-RB")
  field(INPB, "$(P)$(R)PositiveEdgePos-RB")
  field(CALC, "B-A")
}

# Coordinate conversion status
record(calc, "$(P)$(R)CoordConvErrCalc"){
  field(DESC, "Coordinate conversion status calc")
  field(INPA, "$(P)$(R)PositiveEdgeMovConv.STAT CPP")
  field(INPB, "$(P)$(R)NegativeEdgeMovConv.STAT CPP")
  field(INPC, "$(P)$(R)PositiveEdgeMovConvRB.STAT CPP")
  field(INPD, "$(P)$(R)NegativeEdgeMovConvRB.STAT CPP")
  field(CALC, "A||B||C||D")
  field(FLNK, "$(P)$(R)CoordConvErr-Mon")
}

record(bi, "$(P)$(R)CoordConvErr-Mon"){
  field(DESC, "Coordinate conversion status")
  field(ZNAM, "Ok")
  field(ZSV, "NO_ALARM")
  field(ONAM, "Error")
  field(OSV, "MAJOR")
  field(VAL, "0")
  field(INP, "$(P)$(R)CoordConvErrCalc")
}

#####################################################################
# INNER LIMIT PROTECTION
#
# Desc: Protect the slit edges from hitting each other
#       or from hitting an inner limit.

record(ao, "$(P)$(R)NegEdgeInnerLim-SP"){
  field(DESC, "Negative edge inner limit")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(VAL, "$(NEG_LIM)")
  field(FLNK, "$(P)$(R)NegEdgeInnerLim-RB")
}

record(ai, "$(P)$(R)NegEdgeInnerLim-RB"){
  field(DESC, "Negative edge inner limit RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INP, "$(P)$(R)NegEdgeInnerLim-SP")
  field(FLNK, "$(P)$(R)NegativeEdgeProtect")
}

record(ao, "$(P)$(R)PosEdgeInnerLim-SP"){
  field(DESC, "Positive edge inner limit")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(VAL, "$(POS_LIM)")
  field(FLNK, "$(P)$(R)PosEdgeInnerLim-RB")
}

record(ai, "$(P)$(R)PosEdgeInnerLim-RB"){
  field(DESC, "Positive edge inner limit RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INP, "$(P)$(R)PosEdgeInnerLim-SP")
  field(FLNK, "$(P)$(R)PositiveEdgeProtect")
}

# Limit neg edge motion
record(calcout, "$(P)$(R)NegativeEdgeProtect"){
  field(DESC, "Auto set protection limit for neg edge")
#  field(INPA, "$(P)$(R)PositiveEdgePos-RB CPP")          # Read pos edge position
  field(INPA, "$(P)$(R)NegEdgeInnerLim-RB")              # Neg edge inner limit
  field(CALC, "A")
  field(OUT, "$(P)$(R)NegativeEdgePos-SP.DRVH")          # Set neg edge high limit, without processing
  field(DISV, "0")                                       # Record remains disabled until initialization enables it
}

# Limit pos edge motion
record(calcout, "$(P)$(R)PositiveEdgeProtect"){
  field(DESC, "Auto set protection limit for pos edge")
#  field(INPA, "$(P)$(R)NegativeEdgePos-RB CPP")          # Read neg edge position
  field(INPA, "$(P)$(R)PosEdgeInnerLim-RB")              # Pos edge inner limit
  field(CALC, "A")
  field(OUT, "$(P)$(R)PositiveEdgePos-SP.DRVL")          # Set pos edge low limit, without processing
  field(DISV, "0")                                       # Record remains disabled until initialization enables it
}

# Keep the speed of both motors the same
# so they do not hit each other
record(calcout, "$(P)$(R)SpeedProtect"){
  field(DESC, "Keep both motors with same speed")
  field(PINI, "YES")
  field(INPA, "$(CTRL_NEG)Mtr.VELO CPP")
  field(INPB, "$(CTRL_POS)Mtr.VELO CPP")
  field(CALC, "B#A")
  field(OCAL, "A")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(CTRL_POS)Mtr.VELO PP")              # Set pos motor speed equal to neg motor speed
}

# Keep the max speed of both motors the same
# so that their speed can be set automatically
record(calcout, "$(P)$(R)MaxSpeedProtect"){
  field(DESC, "Keep both motors with same max speed")
  field(PINI, "YES")
  field(INPA, "$(CTRL_NEG)Mtr.VMAX CPP")
  field(INPB, "$(CTRL_POS)Mtr.VMAX CPP")
  field(CALC, "B#A")
  field(OCAL, "A")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(CTRL_POS)Mtr.VMAX PP")              # Set pos motor max speed equal to neg motor max speed
}

# Keep the acceleration of both motors the same
# so they do not hit each other
record(calcout, "$(P)$(R)AccProtect"){
  field(DESC, "Keep both motors with same acceleration")
  field(PINI, "YES")
  field(INPA, "$(CTRL_NEG)Mtr.ACCL CPP")
  field(INPB, "$(CTRL_POS)Mtr.ACCL CPP")
  field(CALC, "B#A")
  field(OCAL, "A")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(CTRL_POS)Mtr.ACCL PP")              # Set pos motor acceleration equal to neg motor acceleration
}

#####################################################################
# OUTER LIMIT PROTECTION
#
# Desc: Protect the slit edges from hitting their outer limit.

# Negative edge outer limit
record(ao, "$(P)$(R)LowOuterLim-SP"){
  field(DESC, "Negative edge outer position limit")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "$(LOW_LIM)")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)LowOuterLim-RB")
}

record(calcout, "$(P)$(R)LowOuterLim-RB"){
  field(DESC, "Negative edge outer position limit RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INPA, "$(P)$(R)LowOuterLim-SP")
  field(INPB, "$(P)$(R)NegativeEdgePos-SP.DRVH")
  field(CALC, "A>B?B:A")
  field(OUT, "$(P)$(R)NegativeEdgePos-SP.DRVL")
}

# Positive edge outer limit
record(ao, "$(P)$(R)HighOuterLim-SP"){
  field(DESC, "Positive edge outer position limit")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "$(HIGH_LIM)")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)HighOuterLim-RB")
}

record(calcout, "$(P)$(R)HighOuterLim-RB"){
  field(DESC, "Positive edge outer position limit RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(INPA, "$(P)$(R)HighOuterLim-SP")
  field(INPB, "$(P)$(R)PositiveEdgePos-SP.DRVL")
  field(CALC, "A<B?B:A")
  field(OUT, "$(P)$(R)PositiveEdgePos-SP.DRVH")
}

# Limit center position
record(calc, "$(P)$(R)CenterOuterProtect"){
  field(DESC, "Auto set protection limit for center")
  field(INPA, "$(P)$(R)CoordinateConv.D CPP")            # Read width from virtual coordinates
  field(INPB, "$(P)$(R)HighOuterLim-RB CPP")             # Read high outer limit
  field(INPC, "$(P)$(R)LowOuterLim-RB CPP")              # Read low outer limit
  field(CALC, "F:=A/2;D:=B-F;E:=C+F;0")
  field(FLNK, "$(P)$(R)CenterInnerProtect")              # Call center inner limits protection
  field(DISV, "0")                                       # Record remains disabled until initialization enables it
}

record(calc, "$(P)$(R)CenterInnerProtect"){
  field(DESC, "Auto set protection limit for center")
  field(INPA, "$(P)$(R)CoordinateConv.D CPP")            # Read width from virtual coordinates
  field(INPB, "$(P)$(R)PosEdgeInnerLim-RB CPP")          # Read high inner limit
  field(INPC, "$(P)$(R)NegEdgeInnerLim-RB CPP")          # Read low inner limit
  field(CALC, "F:=A/2;D:=C+F;E:=B-F;0")
  field(FLNK, "$(P)$(R)CenterProtectCalc")               # Call record to select limits to use
}

record(calcout, "$(P)$(R)CenterProtectCalc"){
  field(DESC, "Select high limit for center")
  field(INPA, "$(P)$(R)CenterOuterProtect.D")            # Outer high center limit
  field(INPB, "$(P)$(R)CenterInnerProtect.D")            # Inner high center limit
  field(CALC, "A<B?A:B")
  field(OUT, "$(P)$(R)Center-SP.DRVH")                   # Set Center max high position without processing
  field(FLNK, "$(P)$(R)CenterProtectCalc2")              # Call record to set center high and low limits
}

record(calcout, "$(P)$(R)CenterProtectCalc2"){
  field(DESC, "Select low limit for center")
  field(INPA, "$(P)$(R)CenterOuterProtect.E")            # Outer low center limit
  field(INPB, "$(P)$(R)CenterInnerProtect.E")            # Inner low center limit
  field(CALC, "A>B?A:B")
  field(OUT, "$(P)$(R)Center-SP.DRVL")                   # Set Center min low position without processing
  field(FLNK, "$(P)$(R)CenterProtectCalc3")
}

record(calcout, "$(P)$(R)CenterProtectCalc3"){           # Disable Center-SP if limits are equal or inverted,
  field(DESC, "Disable center if limits disabled")       # since it would otherwise disable limits
  field(INPA, "$(P)$(R)CenterProtectCalc")
  field(INPB, "$(P)$(R)CenterProtectCalc2")
  field(CALC, "A<=B?1:0")                                # if limits are invalid, disable center setpoint
  field(OUT, "$(P)$(R)Center-SP.DISP")                   # (invalid limits do not mean they are wrong!)
}

# Limit max width value
record(calcout, "$(P)$(R)MaxWidthProtect"){
  field(DESC, "Auto set max limit for width")
  field(INPA, "$(P)$(R)CoordinateConv.C CPP")            # Read center from virtual coordinates
  field(INPB, "$(P)$(R)HighOuterLim-RB CPP")             # Read high outer limit
  field(INPC, "$(P)$(R)LowOuterLim-RB CPP")              # Read low outer limit
  field(CALC, "(A-C)<(B-A)?2*(A-C):2*(B-A)")
  field(OUT, "$(P)$(R)Width-SP.DRVH")                    # Set Width max size without processing
  field(DISV, "0")                                       # Record remains disabled until initialization enables it
}

# Limit min width value
record(calcout, "$(P)$(R)MinWidthProtect"){
  field(DESC, "Auto set min limit for width")
  field(INPA, "$(P)$(R)CoordinateConv.C CPP")            # Read center from virtual coordinates
  field(INPB, "$(P)$(R)PosEdgeInnerLim-RB CPP")          # Read high inner limit
  field(INPC, "$(P)$(R)NegEdgeInnerLim-RB CPP")          # Read low inner limit
  field(CALC, "(A-C)>(B-A)?2*(A-C):2*(B-A)")
  field(OUT, "$(P)$(R)Width-SP.DRVL")                    # Set Width min size without processing
  field(DISV, "0")                                       # Record remains disabled until initialization enables it
}

#####################################################################
# POSITION TWEAKING
#
# Desc: Records to allow position tweaking. These records make use
#       of the records defined in the SLIT MOTION CONTROL section.

# Step for pos edge pos increment
record(ao, "$(P)$(R)PositiveEdgeStep-SP"){
  field(DESC, "Step for pos edge increment")
  field(PINI, "YES")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "1")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)PositiveEdgeStep-RB")
}

# Step for pos edge pos increment RB
record(ai, "$(P)$(R)PositiveEdgeStep-RB"){
  field(DESC, "Step for pos edge increment RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INP, "$(P)$(R)PositiveEdgeStep-SP")
}

# Step for neg edge pos increment
record(ao, "$(P)$(R)NegativeEdgeStep-SP"){
  field(DESC, "Step for neg edge increment")
  field(PINI, "YES")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "1")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)NegativeEdgeStep-RB")
}

# Step for neg edge pos increment RB
record(ai, "$(P)$(R)NegativeEdgeStep-RB"){
  field(DESC, "Step for neg edge increment RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INP, "$(P)$(R)NegativeEdgeStep-SP")
}

# Step for center pos increment
record(ao, "$(P)$(R)CenterStep-SP"){
  field(DESC, "Step for center pos increment")
  field(PINI, "YES")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "1")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)CenterStep-RB")
}

# Step for center pos increment RB
record(ai, "$(P)$(R)CenterStep-RB"){
  field(DESC, "Step for center pos increment RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INP, "$(P)$(R)CenterStep-SP")
}

# Step for width increment
record(ao, "$(P)$(R)WidthStep-SP"){
  field(DESC, "Step for width increment")
  field(PINI, "YES")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(VAL, "1")
  field(DRVH, "1000000")
  field(DRVL, "-1000000")
  field(FLNK, "$(P)$(R)WidthStep-RB")
}

# Step for width increment RB
record(ai, "$(P)$(R)WidthStep-RB"){
  field(DESC, "Step for width increment RB")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(INP, "$(P)$(R)WidthStep-SP")
}

# Increment pos edge pos by step
record(bo, "$(P)$(R)IncPositiveEdge-Cmd"){
  field(DESC, "Increment pos edge pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)IncPositiveEdgeCalc")
}

# Calc to increment pos edge position
record(calcout, "$(P)$(R)IncPositiveEdgeCalc"){
  field(DESC, "Increment pos edge by step calc")
  field(INPA, "$(P)$(R)IncPositiveEdge-Cmd")
  field(INPB, "$(P)$(R)PositiveEdgeStep-RB")
  field(INPC, "$(P)$(R)PositiveEdgePos-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Increment command 'on' and motors not moving
  field(OCAL, "C+B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)PositiveEdgePos-SP PP")
}

# Decrement pos edge pos by step
record(bo, "$(P)$(R)DecPositiveEdge-Cmd"){
  field(DESC, "Decrement pos edge pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)DecPositiveEdgeCalc")
}

# Calc to decrement pos edge position
record(calcout, "$(P)$(R)DecPositiveEdgeCalc"){
  field(DESC, "Decrement pos edge by step calc")
  field(INPA, "$(P)$(R)DecPositiveEdge-Cmd")
  field(INPB, "$(P)$(R)PositiveEdgeStep-RB")
  field(INPC, "$(P)$(R)PositiveEdgePos-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Decrement command 'on' and motors not moving
  field(OCAL, "C-B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)PositiveEdgePos-SP PP")
}

# Increment neg edge pos by step
record(bo, "$(P)$(R)IncNegativeEdge-Cmd"){
  field(DESC, "Increment neg edge pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)IncNegativeEdgeCalc")
}

# Calc to increment neg edge position
record(calcout, "$(P)$(R)IncNegativeEdgeCalc"){
  field(DESC, "Increment neg edge by step calc")
  field(INPA, "$(P)$(R)IncNegativeEdge-Cmd")
  field(INPB, "$(P)$(R)NegativeEdgeStep-RB")
  field(INPC, "$(P)$(R)NegativeEdgePos-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Increment command 'on' and motors not moving
  field(OCAL, "C+B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)NegativeEdgePos-SP PP")
}

# Decrement neg edge pos by step
record(bo, "$(P)$(R)DecNegativeEdge-Cmd"){
  field(DESC, "Decrement neg edge pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)DecNegativeEdgeCalc")
}

# Calc to decrement neg edge position
record(calcout, "$(P)$(R)DecNegativeEdgeCalc"){
  field(DESC, "Decrement neg edge by step calc")
  field(INPA, "$(P)$(R)DecNegativeEdge-Cmd")
  field(INPB, "$(P)$(R)NegativeEdgeStep-RB")
  field(INPC, "$(P)$(R)NegativeEdgePos-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Decrement command 'on' and motors not moving
  field(OCAL, "C-B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)NegativeEdgePos-SP PP")
}

# Increment center pos by step
record(bo, "$(P)$(R)IncCenter-Cmd"){
  field(DESC, "Increment center pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)IncCenterCalc")
}

# Calc to increment center position
record(calcout, "$(P)$(R)IncCenterCalc"){
  field(DESC, "Increment center pos by step calc")
  field(INPA, "$(P)$(R)IncCenter-Cmd")
  field(INPB, "$(P)$(R)CenterStep-RB")
  field(INPC, "$(P)$(R)Center-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Increment command 'on' and motors not moving
  field(OCAL, "C+B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)Center-SP PP")
}

# Decrement center pos by step
record(bo, "$(P)$(R)DecCenter-Cmd"){
  field(DESC, "Decrement center pos by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)DecCenterCalc")
}

# Calc to decrement center position
record(calcout, "$(P)$(R)DecCenterCalc"){
  field(DESC, "Decrement center pos by step calc")
  field(INPA, "$(P)$(R)DecCenter-Cmd")
  field(INPB, "$(P)$(R)CenterStep-RB")
  field(INPC, "$(P)$(R)Center-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Decrement command 'on' and motors not moving
  field(OCAL, "C-B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)Center-SP PP")
}

# Increment width by step
record(bo, "$(P)$(R)IncWidth-Cmd"){
  field(DESC, "Increment width by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)IncWidthCalc")
}

# Calc to increment width
record(calcout, "$(P)$(R)IncWidthCalc"){
  field(DESC, "Increment width by step calc")
  field(INPA, "$(P)$(R)IncWidth-Cmd")
  field(INPB, "$(P)$(R)WidthStep-RB")
  field(INPC, "$(P)$(R)Width-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Increment command 'on' and motors not moving
  field(OCAL, "C+B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)Width-SP PP")
}

# Decrement width by step
record(bo, "$(P)$(R)DecWidth-Cmd"){
  field(DESC, "Decrement width by defined step")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)DecWidthCalc")
}

# Calc to decrement width
record(calcout, "$(P)$(R)DecWidthCalc"){
  field(DESC, "Decrement width by step calc")
  field(INPA, "$(P)$(R)DecWidth-Cmd")
  field(INPB, "$(P)$(R)WidthStep-RB")
  field(INPC, "$(P)$(R)Width-RB")
  field(INPD, "$(CTRL_NEG)Mtr.DMOV")
  field(INPE, "$(CTRL_POS)Mtr.DMOV")
  field(CALC, "A&&D&&E")                                 # Decrement command 'on' and motors not moving
  field(OCAL, "C-B")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OUT, "$(P)$(R)Width-SP PP")
}

#####################################################################
# INITIALIZATION
#
# Desc: High Level initialization operations.

# One shot operation
record(calcout, "$(P)$(R)OneShot"){
  field(DESC, "One shot operation")
  field(INPA, "1")
  field(INPB, "$(P)$(R)NegativeEdgePos-RB CPP")       # Process when neg edge pos changes
  field(INPC, "$(P)$(R)PositiveEdgePos-RB CPP")       # Process when pos edge pos changes
  field(CALC, "A;A:=0")                               # Only process whole chain one time
  field(OOPT, "When Non-zero")
  field(ODLY, "10")                                    # Wait 10 sec, so that all low level initialization can finish
  field(OUT, "$(P)$(R)GetNegativeEdgeRB.PROC PP")
}

## Initialize coordinate conversion record with
## readback values

# Store neg edge readback value
record(ai, "$(P)$(R)GetNegativeEdgeRB"){
  field(DESC, "Get neg edge pos RB at init")
  field(INP, "$(P)$(R)NegativeEdgePos-RB")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(FLNK, "$(P)$(R)GetPositiveEdgeRB")
}

# Store pos edge readback value
record(ai, "$(P)$(R)GetPositiveEdgeRB"){
  field(DESC, "Get pos edge pos RB at init")
  field(INP, "$(P)$(R)PositiveEdgePos-RB")
  field(ADEL, "-1")
  field(MDEL, "-1")
  field(FLNK, "$(P)$(R)UpdateCoordVars")
}

# Update conversion variables
record(sseq, "$(P)$(R)UpdateCoordVars"){
  field(DESC, "Update coordinate conv variables")
  field(SELM, "All")
  field(DO1, "1")
  field(DO2, "1")
  field(DOL3, "$(P)$(R)GetNegativeEdgeRB")
  field(DOL4, "$(P)$(R)GetPositiveEdgeRB")
  field(LNK1, "$(P)$(R)PositiveEdgeCenter-SP.PROC PP")
  field(LNK2, "$(P)$(R)NegativeEdgeCenter-SP.PROC PP")
  field(LNK3, "$(P)$(R)UpdateCoordConvVal1 PP")
  field(LNK4, "$(P)$(R)UpdateCoordConvVal2 PP")
  field(DLY4, "1")
  field(FLNK, "$(P)$(R)UpdateCoordConv")
}

# Coordinate conversion update variables
record(ao, "$(P)$(R)UpdateCoordConvVal1"){
  field(DESC, "Coord conv update edge value 1")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
}

record(ao, "$(P)$(R)UpdateCoordConvVal2"){
  field(DESC, "Coord conv update edge value 2")
  field(PREC, "$(PREC)")
  field(EGU, "$(EGU)")
}

# Sequence to update the coordinate conversion
# record with the position readback values
record(sseq, "$(P)$(R)UpdateCoordConv"){
  field(DESC, "Prepare motor record for update")
  field(SELM, "All")
  field(STR1, "Calibrate")
  field(STR2, "Frozen")        # Freeze offset and make VAL = DVAL
  field(STR3, "Frozen")
  field(DOL4, "$(CTRL_NEG)Mtr.RBV")
  field(DOL5, "$(CTRL_POS)Mtr.RBV")
  field(LNK1, "$(P)$(R)SetMode-Sel PP")
  field(LNK2, "$(CTRL_NEG)Mtr.FOFF PP")
  field(LNK3, "$(CTRL_POS)Mtr.FOFF PP")
  field(LNK4, "$(CTRL_NEG)Mtr.VAL PP")
  field(LNK5, "$(CTRL_POS)Mtr.VAL PP")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(FLNK, "$(P)$(R)UpdateCoordConv2")
}

record(sseq, "$(P)$(R)UpdateCoordConv2"){
  field(DESC, "Update coordinate conv record fields")
  field(SELM, "All")
  field(STR1, "Calibrate")
  field(STR2, "Variable")        # Unfreeze offset and change it
  field(STR3, "Variable")        # by setting VAL with converted value
  field(DOL4, "$(P)$(R)UpdateCoordConvVal1")
  field(DOL5, "$(P)$(R)UpdateCoordConvVal2")
  field(STR6, "Move")
  field(LNK1, "$(P)$(R)SetMode-Sel PP")
  field(LNK2, "$(CTRL_NEG)Mtr.FOFF PP")
  field(LNK3, "$(CTRL_POS)Mtr.FOFF PP")
  field(LNK4, "$(P)$(R)NegativeEdgePos-SP PP")
  field(LNK5, "$(P)$(R)PositiveEdgePos-SP PP")
  field(LNK6, "$(P)$(R)SetMode-Sel PP")
  field(DLY4, "1")
  field(DLY5, "0.5")
  field(DLY6, "1")
  field(FLNK, "$(P)$(R)EnblProtect")
}

# Enable limit protection for both edges
record(seq, "$(P)$(R)EnblProtect"){
  field(DESC, "Enable limit protection for edges")
  field(SELM, "All")
  field(DO1, "1")
  field(DO2, "1")
  field(DO3, "1")
  field(DO4, "1")
  field(DO5, "1")
  field(DO6, "1")
  field(DO7, "1")
  field(DO8, "1")
  field(LNK1, "$(P)$(R)NegativeEdgeProtect.DISV")        # Enable neg edge limit protection
  field(LNK2, "$(P)$(R)PositiveEdgeProtect.DISV")        # Enable pos edge limit protection
  field(LNK3, "$(P)$(R)CenterOuterProtect.DISV")         # Enable center outer limit protection
  field(LNK4, "$(P)$(R)MaxWidthProtect.DISV")            # Enable max width limit protection
  field(LNK5, "$(P)$(R)NegativeEdgeProtect.PROC PP")     # Process record so it can init limits
  field(LNK6, "$(P)$(R)PositiveEdgeProtect.PROC PP")     # Process record so it can init limits
  field(LNK7, "$(P)$(R)LowOuterLim-SP.PROC PP")          # Process low outer limit
  field(LNK8, "$(P)$(R)HighOuterLim-SP.PROC PP")         # Process high outer limit
  field(FLNK, "$(P)$(R)EnblProtect2")
}

record(seq, "$(P)$(R)EnblProtect2"){
  field(DO1, "1")
  field(DO2, "1")
  field(DO3, "1")
  field(DO4, "0")  # enable
  field(DO5, "0")  # enable
  field(DO6, "0")  # enable
  field(DO7, "0")  # enable
  field(DO8, "0")
  field(DO9, "1")
  field(LNK1, "$(P)$(R)MinWidthProtect.DISV")            # Enable min width limit protection
  field(LNK2, "$(P)$(R)NegEdgeInnerLim-SP.PROC")         # Process neg edge inner limit
  field(LNK3, "$(P)$(R)PosEdgeInnerLim-SP.PROC")         # Process pos edge inner limit
  field(LNK4, "$(P)$(R)NegativeEdgePos-SP.DISP")         # Enable position set point records
  field(LNK5, "$(P)$(R)PositiveEdgePos-SP.DISP")         # Enable position set point records
  field(LNK6, "$(P)$(R)Center-SP.DISP")                  # Enable position set point records
  field(LNK7, "$(P)$(R)Width-SP.DISP")                   # Enable position set point records
  field(LNK8, "$(P)$(R)KeepEdgeCenterLocked.A PP")       # Unlock edges' center references
  field(LNK9, "$(P)$(R)ForceComplete-Mon PP")            # Set force complete flag
}
